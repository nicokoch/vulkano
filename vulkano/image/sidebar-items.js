initSidebarItems({"enum":[["ComponentSwizzle",""],["ImageType",""],["Layout",""],["MipmapsCount","Specifies how many mipmaps must be allocated.Note that at least one mipmap must be allocated, to store the main level of the image."]],"struct":[["Image","A storage for pixels or arbitrary data."],["ImagePrototype","Prototype of an image.Needs to be transitionned to a proper layout in order to be turned into a regular `Image`."],["ImageView","A representation of an image.Accessing an image from within a shader can only be done through an `ImageView`. An `ImageView` represents a region of an image. You can also do things like creating a 2D view of a 3D image, swizzle the channels, or change the format of the texture (with some restrictions)."],["Swizzle",""],["Type1d",""],["Type1dArray",""],["Type1dArrayMultisample",""],["Type1dMultisample",""],["Type2d",""],["Type2dArray",""],["Type2dArrayMultisample",""],["Type2dMultisample",""],["Type3d",""],["Type3dMultisample",""],["TypeCube",""],["TypeCubeArray",""],["TypeCubeArrayMultisample",""],["TypeCubeMultisample",""],["Usage","Describes how an image is going to be used. This is **not** an optimization.If you try to use an image in a way that you didn't declare, a panic will happen."]],"trait":[["AbstractImage",""],["AbstractImageView",""],["AbstractTypedImageView",""],["AbstractTypedImageViewsTuple",""],["CanCreateView",""],["ImageTypeMarker",""],["ImageViewTypeMarker",""],["MultisampleType",""],["TypeMarker",""]]});